[uwsgi]
# 配置服务器的监听ip和端口，让uWSGI作为nginx的支持服务器的话，设置socket就行；
# 如果要让uWSGI作为单独的web-server，用http
#socket = 0.0.0.0:8000
http = 0.0.0.0:8080
 
# 配置项目目录（此处设置为项目的根目录）
chdir = /home/wzq/xm
 
# 配置入口模块
wsgi-file = app.py

# 开启master, 将会多开一个管理进程, 管理其他服务进程
master = True

#在 uWSGI 中，lazy_app 选项用于控制应用的延迟加载行为。当设置 lazy_app = true 时，应用程序将在第一次接收到请求时加载，而不是在启动服务器时立即加载。

#这个选项的作用在于延迟应用的加载，可以在启动服务器时减少资源消耗，特别是对于大型应用或者需要加载大量资源的应用来说，可以提高服务器的启动速度和性能。当服务器启动后，如果有请求到达，uWSGI 将加载应用程序并开始处理请求。

#这样可以避免在启动时加载所有应用程序，尤其是在应用程序较多或者资源消耗较大的情况下，可以有效地减少启动时间和资源占用。

#总之，lazy_app 选项可以帮助优化服务器的启动性能，特别是对于大型或者资源消耗较大的应用来说，是一个很有用的选项。
lazy-apps = True

# 服务器开启的进程数量
processes = 1
 
# 后台运行时, 输出信息将会打印到log中
daemonize = %(chdir)/log/uwsgilog/uwsgi.log
 
# 服务器进程开启的线程数量
threads = 4
 
# 退出的时候清空环境变量
# 如果在 uWSGI 配置中没有设置 vacuum = true，则在 uWSGI 进程退出时，可能会导致其监听的 UNIX 套接字文件残留在系统中而不被清理。这样就可能导致以下混乱情况：
# 套接字文件冲突： 如果残留的套接字文件与新启动的 uWSGI 进程尝试监听相同的路径和名称，就会导致套接字文件冲突。这会导致新的 uWSGI 进程无法成功启动或无法正常处理请求。
# 资源浪费： 残留的套接字文件会占用系统资源，并可能导致系统出现资源浪费的问题。虽然单个套接字文件可能占用的资源很少，但如果多次重启 uWSGI 进程并且套接字文件未被清理，这些资源的累积可能会对系统性能产生负面影响。
# 运维困难： 残留的套接字文件可能会使系统运维变得更加困难。在诊断和调试问题时，需要考虑到可能存在的残留套接字文件，从而增加了系统维护的复杂性。
# 最好在 uWSGI 配置中设置 vacuum = true，以确保在 uWSGI 进程退出时自动清理其监听的 UNIX 套接字文件。这样可以避免套接字文件冲突、资源浪费和运维困难等问题，提高系统的稳定性和可靠性。
vacuum = true
 
# 进程pid
pidfile = uwsgi.pid

# 设置用于uwsgi包解析的内部缓存区大小，默认为4k
buffer-size = 32768
 
#修改python代码时，自动重启uwsgi服务
#py-autoreload = 1 
#指定了需要忽略的文件
#py-autoreload-ignore = *.pyc

#获取uwsgi统计信息的服务地址，只能够本机访问(curl --http0.9 127.0.0.1:8081)
state=127.0.0.1:8081


